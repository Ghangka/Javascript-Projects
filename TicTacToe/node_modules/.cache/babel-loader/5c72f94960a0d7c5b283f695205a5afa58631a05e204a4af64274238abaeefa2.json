{"ast":null,"code":"var _jsxFileName = \"/Users/Ghangka/Development/Github_Projects/Projects/TicTacToe/src/App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = useState(\"Player X turn\");\n  const [data, setData] = useState(Array(9).fill(null));\n  function reset() {\n    const newData = Array(9).fill(null);\n    setData(newData);\n    setMessage(\"Player X turn\");\n  }\n  function turn(index) {\n    const newData = [...data];\n    if (message === \"Player X turn\") {\n      newData[index] = \"X\";\n      setData(newData);\n      if (winner(newData)) {\n        setMessage(\"Player X Wins\");\n      } else {\n        setMessage(\"Player O turn\");\n      }\n    } else if (message === \"Player O turn\") {\n      newData[index] = \"O\";\n      setData(newData);\n      if (winner(newData)) {\n        setMessage(\"Player O Wins\");\n      } else {\n        setMessage(\"Player X turn\");\n      }\n    }\n  }\n  function winner(newData) {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (newData[a] && newData[a] === newData[b] && newData[a] === newData[c]) {\n        console.log(\"here\");\n        return true;\n      }\n    }\n    return false;\n  }\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: [\" \", message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: data.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => turn(index),\n          className: \"item\",\n          children: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: reset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1SO/v0Ak8cqKN6FAUh06ewzUmhM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","message","setMessage","data","setData","Array","fill","reset","newData","turn","index","winner","lines","i","length","a","b","c","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","value","onClick","_c","$RefreshReg$"],"sources":["/Users/Ghangka/Development/Github_Projects/Projects/TicTacToe/src/App.js"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [message, setMessage] = useState(\"Player X turn\");\n\n  const [data, setData] = useState(Array(9).fill(null));\n\n  function reset() {\n    const newData = Array(9).fill(null);\n    setData(newData);\n    setMessage(\"Player X turn\");\n  }\n\n  function turn(index) {\n    const newData = [...data];\n\n    if (message === \"Player X turn\") {\n      newData[index] = \"X\";\n      setData(newData);\n      if (winner(newData)) {\n        setMessage(\"Player X Wins\");\n      } else {\n        setMessage(\"Player O turn\");\n      }\n    } else if (message === \"Player O turn\") {\n      newData[index] = \"O\";\n      setData(newData);\n      if (winner(newData)) {\n        setMessage(\"Player O Wins\");\n      } else {\n        setMessage(\"Player X turn\");\n      }\n    }\n  }\n\n  function winner(newData) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        newData[a] &&\n        newData[a] === newData[b] &&\n        newData[a] === newData[c]\n      ) {\n        console.log(\"here\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  console.log(data);\n\n  return (\n    <div className=\"app\">\n      <div className=\"message\"> {message}</div>\n      <div className=\"container\">\n        <div className=\"grid\">\n          {data.map((value, index) => (\n            <div key={index} onClick={() => turn(index)} className=\"item\">\n              {value}\n            </div>\n          ))}\n        </div>\n        <button className=\"button\" onClick={reset}>\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,eAAe,CAAC;EAEvD,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAACS,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAErD,SAASC,KAAKA,CAAA,EAAG;IACf,MAAMC,OAAO,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACnCF,OAAO,CAACI,OAAO,CAAC;IAChBN,UAAU,CAAC,eAAe,CAAC;EAC7B;EAEA,SAASO,IAAIA,CAACC,KAAK,EAAE;IACnB,MAAMF,OAAO,GAAG,CAAC,GAAGL,IAAI,CAAC;IAEzB,IAAIF,OAAO,KAAK,eAAe,EAAE;MAC/BO,OAAO,CAACE,KAAK,CAAC,GAAG,GAAG;MACpBN,OAAO,CAACI,OAAO,CAAC;MAChB,IAAIG,MAAM,CAACH,OAAO,CAAC,EAAE;QACnBN,UAAU,CAAC,eAAe,CAAC;MAC7B,CAAC,MAAM;QACLA,UAAU,CAAC,eAAe,CAAC;MAC7B;IACF,CAAC,MAAM,IAAID,OAAO,KAAK,eAAe,EAAE;MACtCO,OAAO,CAACE,KAAK,CAAC,GAAG,GAAG;MACpBN,OAAO,CAACI,OAAO,CAAC;MAChB,IAAIG,MAAM,CAACH,OAAO,CAAC,EAAE;QACnBN,UAAU,CAAC,eAAe,CAAC;MAC7B,CAAC,MAAM;QACLA,UAAU,CAAC,eAAe,CAAC;MAC7B;IACF;EACF;EAEA,SAASS,MAAMA,CAACH,OAAO,EAAE;IACvB,MAAMI,KAAK,GAAG,CACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;IAED,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGL,KAAK,CAACC,CAAC,CAAC;MAC1B,IACEL,OAAO,CAACO,CAAC,CAAC,IACVP,OAAO,CAACO,CAAC,CAAC,KAAKP,OAAO,CAACQ,CAAC,CAAC,IACzBR,OAAO,CAACO,CAAC,CAAC,KAAKP,OAAO,CAACS,CAAC,CAAC,EACzB;QACAC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;QACnB,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd;EAEAD,OAAO,CAACC,GAAG,CAAChB,IAAI,CAAC;EAEjB,oBACEL,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBvB,OAAA;MAAKsB,SAAS,EAAC,SAAS;MAAAC,QAAA,GAAC,GAAC,EAACpB,OAAO;IAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACzC3B,OAAA;MAAKsB,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBvB,OAAA;QAAKsB,SAAS,EAAC,MAAM;QAAAC,QAAA,EAClBlB,IAAI,CAACuB,GAAG,CAAC,CAACC,KAAK,EAAEjB,KAAK,kBACrBZ,OAAA;UAAiB8B,OAAO,EAAEA,CAAA,KAAMnB,IAAI,CAACC,KAAK,CAAE;UAACU,SAAS,EAAC,MAAM;UAAAC,QAAA,EAC1DM;QAAK,GADEjB,KAAK;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN3B,OAAA;QAAQsB,SAAS,EAAC,QAAQ;QAACQ,OAAO,EAAErB,KAAM;QAAAc,QAAA,EAAC;MAE3C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACzB,EAAA,CA9EQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAgFZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}